@implements IDisposable

<section id="cart-list">
    <div class="container">
        <div class="row">
            <div class="col-8 ">
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col"></th>
                            <th scope="col">Product</th>
                            <th scope="col" class="text-end" >Price</th>
                            <th scope="col" class="quant-display">Quantity</th>
                            <th scope="col" class="text-end">Subtotal</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (mycart != null)
                        {
                            @foreach (var item in mycart.Items)
                            {
                                <DIsplayProduct OnProductDeleted="(() => ProductDeleted(item))" OnProductQuantityAdded="(() => Add(item.Product.Id))" OnProductQuantityRemoved="(() => Remove(item.Product.Id))" Product="item">
                                </DIsplayProduct>
                            }
                        }
                    </tbody>
                </table>
                <div class="d-flex justify-content-between align-items-center">
                    <div class="box-coupon">
                        <p>If you have a coupon code, please apply it below.</p>
                        <div class="coupon-submit">
                            <input type="text" placeholder="Coupon code" @bind="couponDiscount" />
                            <button class="coupon-btn" @onclick="ValidateCoupon">Apply Coupon</button>

                        </div>
                    </div>
                    <div>
                        <button class="update-btn " @onclick="@UpdateCartAsync">UPDATE CART</button>
                    </div>
                </div>
            </div>
            <div class="col-4 ">
                <div id="cart-totals">
                    <h2 class="cart-header">CART TOTALS</h2>
                    <div class="info cost">
                        <div class="d-flex justify-content-between subtotal-div ">
                            <div class="fw-bold">Subtotal</div>
                            <div class="price-display fw-bold">$@Notifier.Subtotal </div>
                        </div>
                        <div class="d-flex justify-content-between align-items-center subtotal-div">
                            <div class="fw-bold mt-2">Shipping</div>

                            <div class="text-end">
                                <label for="flat-rate">
                                    Flat rate:<span class="font-green ms-1 me-1">$20.00</span>
                                    <input type="radio" id="flat-rate" class="mt-3 mb-2" name="shipping" checked @onchange="@(() => CalculateWithShipping(20))" /><br>
                                </label>
                                <label for="free-shipping" class="me-1">Free shipping</label>
                                <input type="radio" id="free-shipping" class="mt-3 mb-2" name="shipping" @onchange="@(() => CalculateWithShipping(0))" /> <br>
                                <label for="local-pickup">Local pickup<span class="font-green ms-1 me-1">$25.00</span></label>
                                <input type="radio" id="local-pickup" class="mt-3 mb-2" name="shipping" @onchange="@(() => CalculateWithShipping(25))" /><br>
                                <div class="text-end">
                                    <div class="mt-3 mb-2"> Shipping to AL.</div>
                                    <a class="checker" href="#">Change adress</a>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex justify-content-between">
                            <div class="fw-bold">TOTAL</div>
                            <div class="price-display">$@Notifier.SubWithShip</div>
                        </div>
                        <div class="d-flex justify-content-center">
                            <button class="cart-btn " type="button" @onclick=@Checkout>PROCEED TO CHECKOUT</button>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</section>

<div id="mobile-cart-list">
    <div class="mobile-cart-header">Shopping Cart</div>
    <div class="container mt-4 p-3">

        @if (mycart != null)
        {
            @foreach (var item in mycart.Items)
            {
                <div class="row ">

                    <div class="col-3"><img class="me-4" src="@item.Product.Picture" alt=""></div>
                    <div class="col-6">
                        <div>
                            <div class=" product-name">@item.Product.ProductName</div>

                            <div class="input-group quantity-shopping-cart ">
                                <button class="minus-btn remove-quan" type="button" name="button" @onclick="@(() => Remove(item.Product.Id))">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <input type="text" name="name" id="@($"product-quantity{item.Product.Id}")" value="@item.Quantity">
                                <button class="plus-btn me-3 add-quan" type="button" name="button" @onclick="@(() => Add(item.Product.Id))">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="col-3 mb-2">
                        <div class="mdelete">

                            <div class="mdel_btn">
                                <i class="fa fa-times-circle  mdelete-btn " @onclick="@(() => RemoveItem(item))"> </i>
                            </div>


                            <div>$@item.Product.Subtotal</div>
                        </div>
                    </div>
                </div>
                <div class="border mb-3"></div>
            }
        }
        <div class="d-flex justify-content-between mt-5">
            <button class="coupon-mbtn">Add Coupon</button>
            <button class="update-mbtn" @onclick="@UpdateCartAsync">Update Cart</button>
        </div>
        <div class="d-flex justify-content-between mt-4">
            <div>Cart Subtotal</div>
            <div>$@Notifier.Subtotal</div>
        </div>
        <div class="d-flex justify-content-between mt-4">
            <div>Shipping</div>
            <select>
                <option value="20">Flat rate: $20.00</option>
                <option value="0" >Free shipping</option>
                <option value="25">Local pickup: $25.00</option>
            </select>
        </div>
        <div class="d-flex justify-content-between mt-4">
            <div>TOTAL</div>
            <div>$@Notifier.SubWithShip</div>
        </div>
        <button class="checkout-btn" type="button" @onclick=@Checkout>Checkout</button>
    </div>
</div>

<section id="mediun-cart-list">
    <div class="container">
            <div>
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col"></th>
                            <th scope="col">Product</th>
                            <th scope="col" class="text-end" >Price</th>
                            <th scope="col" class="quant-display">Quantity</th>
                            <th scope="col" class="text-end">Subtotal</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (mycart != null)
                        {
                            @foreach (var item in mycart.Items)
                            {
                                <DIsplayProduct OnProductDeleted="(() => ProductDeleted(item))" OnProductQuantityAdded="(() => Add(item.Product.Id))" OnProductQuantityRemoved="(() => Remove(item.Product.Id))" Product="item">
                                </DIsplayProduct>
                            }
                        }
                    </tbody>
                </table>
                <div class="d-flex justify-content-between align-items-center">
                    <div class="box-coupon">
                        <p>If you have a coupon code, please apply it below.</p>
                        <div class="coupon-submit">
                            <input type="text" placeholder="Coupon code" @bind="couponDiscount" />
                            <button class="coupon-btn" @onclick="ValidateCoupon">Apply Coupon</button>

                        </div>
                    </div>
                    <div>
                        <button class="update-btn " @onclick="@UpdateCartAsync">UPDATE CART</button>
                    </div>
                </div>
            </div>
       
            <div >
                @*<div class="d-flex justify-content-between mt-5">
                    <button class="coupon-mbtn">Add Coupon</button>
                    <button class="update-mbtn">Update Cart</button>
                </div>*@
                <div class="d-flex justify-content-between mt-4">
                    <div>Cart Subtotal</div>
                    <div>$@Notifier.Subtotal</div>
                </div>
                <div class="d-flex justify-content-between mt-4">
                    <div>Shipping</div>
                    <select>
                        <option value="20">Flat rate: $20.00</option>
                        <option value="0">Free shipping</option>
                        <option value="25">Local pickup: $25.00</option>
                    </select>
                </div>
                <div class="d-flex justify-content-between mt-4">
                    <div>TOTAL</div>
                    <div>$@Notifier.SubWithShip</div>
                </div>
                <button class="checkout-btn " type="button" @onclick=@Checkout>Checkout</button>
            </div>
        </div>

</section>
    @*</div>*@


<Kenakata.Shared.Textbanner.Alsolikecart />
<CartCarousel OnProductAdded="ProductAdded" />



@code{
    private ShoppingCart mycart;
    private decimal subtotalwithshipp;
    private decimal subtotal;
    private List<TemporaryQuantityModel> quantitylist = new List<TemporaryQuantityModel>();
    private int productcount = 0;
    private decimal prodquantprice = 0;
    private int prodquant = 0;
    private int currentCount = 1;
    private string couponDiscount;



    private void Checkout()
    {
        NavManager.NavigateTo("/checkout");
    }
    protected override async Task OnInitializedAsync()
    {

        Notifier.Notify += OnNotify;

        mycart = await session.GetItemAsync<ShoppingCart>("MyShoppingCart");
        if (mycart.CouponDiscount == 0)
        {
            mycart.CouponDiscount = 1;
            await session.SetItemAsync("MyShoppingCart", mycart);
        }

        foreach (var item in mycart.Items)
        {
            subtotal = item.Product.Price * item.Quantity;
            item.Product.Subtotal = subtotal;
            quantitylist.Add(new TemporaryQuantityModel { ProductId = item.Product.Id, TemporaryQuantity = item.Quantity });
        }
        subtotal = 0;
        foreach (var item in mycart.Items)
        {

            var itemcost = item.Product.Price * item.Quantity;
            subtotal = subtotal + itemcost;
        }
        subtotal = subtotal * mycart.CouponDiscount;

        await CalculateWithShipping(20);


    }

    private async Task CalculateWithShipping(decimal price)
    {
        Notifier.SubWithShip = Notifier.Subtotal + price;
        mycart.ShippingPrice = price;
        await session.SetItemAsync("MyShoppingCart", mycart);

    }


    public async Task OnNotify()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        Notifier.Notify -= OnNotify;
    }


    private async Task RemoveItem(CartProduct item)
    {
        mycart.Items.Remove(item);
        await session.SetItemAsync("MyShoppingCart", mycart);
        await GetShoppingCartQuantitySubTotal();
    }

    private async Task GetShoppingCartQuantitySubTotal()
    {
        productcount = 0;
        subtotal = 0;
        @foreach (var item in mycart.Items)
        {
            productcount = productcount + item.Quantity;
            prodquantprice = item.Product.Price * item.Quantity;
            subtotal = subtotal + prodquantprice;
        }
        subtotal = subtotal * mycart.CouponDiscount;
        Notifier.Subtotal = subtotal;
        Notifier.Counter = productcount;
        await CalculateWithShipping(mycart.ShippingPrice);



    }


    private async Task Add(int id)
    {
        currentCount = await JSRuntime.InvokeAsync<int>("increaseValue", id);
        var item = mycart.Items.FirstOrDefault(i => i.Product.Id == id);
        item.Product.Subtotal = 0;
        item.Product.Subtotal = item.Product.Price * currentCount;
        item.Quantity = currentCount;
        var product = quantitylist.FirstOrDefault(p => p.ProductId == item.Product.Id);
        if (product != null)
        {
            product.TemporaryQuantity = currentCount;
        }
        else
        {
            quantitylist.Add(new TemporaryQuantityModel { ProductId = item.Product.Id, TemporaryQuantity = currentCount });
        }


    }

    private async Task Remove(int id)
    {
        currentCount = await JSRuntime.InvokeAsync<int>("decreaseValue", id);
        var item = mycart.Items.FirstOrDefault(i => i.Product.Id == id);
        item.Product.Subtotal = 0;
        item.Product.Subtotal = item.Product.Price * currentCount;
        item.Quantity = currentCount;

        var product = quantitylist.FirstOrDefault(p => p.ProductId == item.Product.Id);
        @if (product != null)
        {
            product.TemporaryQuantity = currentCount;
        }
        else
        {
            quantitylist.Add(new TemporaryQuantityModel { ProductId = item.Product.Id, TemporaryQuantity = currentCount });
        }

    }

    private async Task UpdateCartAsync()
    {
        foreach (var item in mycart.Items)
        {
            var temp = quantitylist.FirstOrDefault(t => t.ProductId == item.Product.Id);
            @if (temp != null)
            {
                item.Quantity = temp.TemporaryQuantity;
            }
        }
        mycart.Items.RemoveAll(t => t.Quantity == 0);
        await session.SetItemAsync("MyShoppingCart", mycart);
        await GetShoppingCartQuantitySubTotal();

    }

    private async Task ValidateCoupon()
    {
        decimal discount;

        if (mycart.CouponDiscount == 1)
        {
            switch (couponDiscount)
            {
                case "KenaKata5":
                    discount = Convert.ToDecimal(0.95);
                    mycart.CouponDiscount = discount;
                    await session.SetItemAsync("MyShoppingCart", mycart);
                    await GetShoppingCartQuantitySubTotal();
                    break;

                case "KenaKata10":
                    discount = Convert.ToDecimal(0.9);
                    mycart.CouponDiscount = discount;
                    await session.SetItemAsync("MyShoppingCart", mycart);
                    await GetShoppingCartQuantitySubTotal();
                    break;

                case "KenaKata15":
                    discount = Convert.ToDecimal(0.85);
                    mycart.CouponDiscount = discount;
                    await session.SetItemAsync("MyShoppingCart", mycart);
                    await GetShoppingCartQuantitySubTotal();
                    break;

                case "KenaKata20":
                    discount = Convert.ToDecimal(0.8);
                    mycart.CouponDiscount = discount;
                    await session.SetItemAsync("MyShoppingCart", mycart);
                    await GetShoppingCartQuantitySubTotal();
                    break;

                default:
                    break;
            }

        }


    }
    protected async Task ProductAdded()
    {
        mycart = await session.GetItemAsync<ShoppingCart>("MyShoppingCart");
        foreach (var item in mycart.Items)
        {
            item.Product.Subtotal = item.Product.Price * item.Quantity;
        }
        await session.SetItemAsync("MyShoppingCart", mycart);
    }

    protected async Task ProductDeleted(CartProduct product)
    {
        mycart.Items.Remove(product);
        await session.SetItemAsync("MyShoppingCart", mycart);
        mycart = await session.GetItemAsync<ShoppingCart>("MyShoppingCart");
        await GetShoppingCartQuantitySubTotal();
    }
}